/***************************************************************************
 *      Mechanized Assault and Exploration Reloaded Projectfile            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef automjobsH
#define automjobsH

class cClient;
class cClientMoveJob;
class cVehicle;

class cAutoMJob
{
private:
	int lastDestX; // last destination generated by the AI.
	int lastDestY;
	// needed to check if the move job was changed from outside the AI (i.e. by the player)
	cClient* client;
	cVehicle* vehicle; // the vehicle the auto move job belongs to
	int n;             // frame delay counter
	bool finished;     // true when the job can be deleted

	// the operation point of the surveyor
	// the surveyor tries to stay near this coordinates
	int OPX;
	int OPY;
	bool playerMJob; //the player has changed the move job

private:
	float calcScoreDistToOtherSurveyor (const std::vector<cAutoMJob*>& jobs, int PosX, int PosY, float e) const;

	void DoAutoMove (const std::vector<cAutoMJob*>& jobs, int iNumber);
	float CalcFactor (int PosX, int PosY, const std::vector<cAutoMJob*>& jobs);
	void PlanNextMove (const std::vector<cAutoMJob*>& jobs);
	void PlanLongMove (const std::vector<cAutoMJob*>& jobs);
	void changeOP();
	bool isFinished() const { return finished; }

public:
	cAutoMJob (cClient& client, cVehicle* vehicle);
	~cAutoMJob();
public:
	static void handleAutoMoveJobs();
};

#endif  //automjobsH
