PREREQUISITES

You'll need to have these libraries with equivalent developer
packages to build MAXR:

 sdl2
 sdl-mixer 2.0 (with Vorbis support)
 sdl-net 2.0

SDL libraries can be found at http://www.libsdl.org

MAXR is distributed with a CMakeLists.txt file for 'cmake'.
Consequently, if you are building from source, you will have to
set up your Makefiles with cmake, before you can run 'make'.

Sourcecode:

You can get it here:

http://www.maxr.org/docs.php?id=3

Or fresh from the GIT here:

http://git.maxr.org/maxr/maxr.git

WINDOWS

 Basically the same as for Linux:

 $ mkdir build
 $ cd build
 $ cmake ..
 $ make

LINUX

 First untar the package:
 
 $ tar xzf maxr-x.y.z.tar.gz
 
 Then change to the new directory:
 
 $ cd maxr-x.y.z
 
 Set up the Makefiles from the projects root folder:
 
 $ mkdir build
 $ cd build
 $ cmake ..
 
 If everything went well you should now be able to run make. 

 $ make install
 
 Compiles the maxr binary and installs it along with the game
 data to the default prefix which is probably /usr/local.

 Use 'make DESTDIR=/foo/bar install' to make use of destdir.

 Hint: If you just want to start maxr without installing simply
 override the data path MAXRDATA after running 'make' in your
 build dir:

 $ MAXRDATA=../data/ ./maxr

How to change between Debug and Release build:

 Use the options -DCMAKE_BUILD_TYPE=Debug or 
 -DCMAKE_BUILD_TYPE=Release when running cmake:

 $ cmake -DCMAKE_BUILD_TYPE=Release ..

How to build the dedicated server of maxr:

 Use the options -DMAXR_BUILD_DEDICATED_SERVER=ON in another
 cmake build folder, because the binary will overwrite any
 existing maxr binary. From the projects root folder:

 $ mkdir build-dedicated
 $ cd build-dedicated
 $ cmake --DMAXR_BUILD_DEDICATED_SERVER=ON ..

Rebuilding:

You should clean your existing maxr release build first with:

 $ make clean

Starting:

After installing you can start maxr executing 'maxr'

